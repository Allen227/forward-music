{"version":3,"sources":["page/home/component/header/index.tsx","component/svg-icon/index.tsx","plugin/audioPlayer/index.ts","plugin/parseTime.ts","plugin/currentTimeContext.ts","page/home/component/footer/index.tsx","page/home/component/left-side/index.tsx","component/box-list/index.tsx","const/index.tsx","server/request.tsx","server/api.tsx","store/actions/recommend.tsx","store/actions/playlist.tsx","store/actions/audio.tsx","store/actions/rank.tsx","store/actions/song.tsx","container/rank/index.tsx","page/rank/index.tsx","page/song/index.tsx","container/song/index.tsx","container/detail/index.tsx","store/actions/base.tsx","page/detail/index.tsx","container/recommend/index.tsx","page/recommend/index.tsx","container/home/index.tsx","page/home/index.tsx","router/index.tsx","store/reducers/base.tsx","store/reducers/index.tsx","store/reducers/recommend.tsx","store/reducers/playlist.tsx","store/reducers/audio.tsx","store/reducers/rank.tsx","store/reducers/song.tsx","store/index.tsx","App.tsx","index.tsx"],"names":["AppHeader","customStyle","className","style","to","activeClassName","SvgIcon","href","event","aria-hidden","onClick","AudioPlayer","this","_instance","loop","parseTime","timestamp","totalSec","seconds","Math","floor","minute","Audio","currentTime","value","update","time","currentTimeContext","React","createContext","setStatus","status","stopMusic","playMusic","curSongInfo","playTracks","fetchSongUrl","setSource","fetchLyric","audio","audioPlayer","getInstance","statusClass","push","useState","volume","setVolume","curPlayTime","setPlayTime","isMove","setMoveStatus","timeContext","useContext","nextSongIcon","width","height","a","id","songUrlData","source","data","url","slideTimeEnd","controlPreOrNext","type","curSongIdx","findIndex","el","playPreSong","length","playNextSong","ontimeupdate","timeupdate","path","useEffect","join","onChange","onAfterChange","min","max","round","dt","tipFormatter","LeftSide","trackListDom","deleteTrack","loadSource","historyList","localStorage","getItem","history","useHistory","track","songInfo","name","picUrl","player","message","warn","map","index","key","playCurSong","playListStyle","curSongBoxClass","autoHide","pathname","state","src","alt","BoxList","recommendList","rankList","boxListArr","boxList","item","jumpObj","jumpDetail","coverImgUrl","FETCH_RECOMMEND_TAGS","FETCH_RECOMMEND_TAG__DETAIL","FETCH_PLAYLIST_DETAIL","FETCH_SONG_URL","FETCH_RANK_LIST","FETCH_LYRIC","MUSIC_PLAYER","fetchUtil","method","fetch","body","JSON","stringify","then","res","json","server_url","Api","fetch_recommend_tags","req","fetch_recommend_tags_detail","cat","fetch_playlist_detail","playlistId","fetch_song_url","songId","fetch_rank_list","fetch_lyric","fetchRemmendTags","dispatch","server","actions","payload","catch","err","fetchRecommendDetail","filteredStack","code","playlists","forEach","find","fetchDetailSuccess","fetchPlaylistDetail","actionTypes","fetchRankList","connect","rankDom","list","parsedResult","getActiveIndex","preIndex","searchTime","resultIndex","includes","computedCurLine","lyricData","location","useLocation","currentLine","setCurrentLine","lyricListDom","document","querySelector","top","removeAttribute","lyricStr","lrc","lyric","lyricArr","split","matchInfo","line","match","slice","trim","lyricDom","lyricStyle","setLoop","pushPlayTracks","topInfo","songslist","playlistDetail","al","ar","playlist","playList","tracks","idx","playSong","description","recommendBox","BoxListDom","recommendTags","recommendTagDetail","activeTag","setActiveTag","Object","keys","tags","tabClass","selectedTag","setTime","currentTimeBus","homeBgStyle","invalidStyle","useRouteMatch","backgroundImage","offsetWidth","offsetHeight","background","border","color","Provider","from","exact","component","Recommend","Detail","Rank","Song","Router","Home","combineReducers","action","assign","songUrl","parsedSongInfo","localSongInfo","parse","play","pause","setItem","load","playIndex","songTracks","parsedTracks","inputHistoryTracks","deleteItemInTracks","delIdx","splice","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","App","store","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.77383b0b.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './style.pcss';\r\n\r\ninterface Props {\r\n  customStyle: object\r\n}\r\n\r\nfunction AppHeader ({customStyle}: Props) {\r\n  return (\r\n    <header className=\"app-header\" style={customStyle}>\r\n      <div className=\"header-bg\"></div>\r\n      <div className=\"header-container\" style={customStyle}>\r\n        <NavLink to=\"recommend\">\r\n          <h1 className=\"app-title\">MOMENT</h1>\r\n        </NavLink>\r\n        <ul className=\"menu-list\">\r\n          <NavLink to=\"/recommend\" className=\"menu-item\" activeClassName=\"active\">\r\n            <li>推荐</li>\r\n          </NavLink>\r\n          <NavLink to=\"/rank\" className=\"menu-item\" activeClassName=\"active\">\r\n            <li>排行榜</li>\r\n          </NavLink>\r\n        </ul>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport './style.pcss';\r\n\r\ninterface Props {\r\n  href: string,\r\n  customStyle?: object,\r\n  event: Function\r\n}\r\n\r\nexport default function SvgIcon ({href, customStyle, event}: Props) {\r\n  return (\r\n    <svg className=\"icon svg-icon\" style={customStyle} aria-hidden=\"true\" onClick={() => event()}>\r\n      <use href={`#${href}`}/>\r\n    </svg>\r\n  )\r\n}\r\n","/**\r\n * AudioPlayer\r\n */\r\nexport default class AudioPlayer {\r\n  private static _instance: HTMLMediaElement = new Audio();\r\n  /**\r\n   * get single instance\r\n   */\r\n  public static getInstance () {\r\n    // default loop mode\r\n    this._instance.loop = true;\r\n    return this._instance;\r\n  }\r\n}","export default function parseTime (timestamp: number) {\r\n  // filter timestamp that is undefined\r\n  if (!timestamp) timestamp = 0;\r\n  const totalSec = timestamp / 1e3;\r\n  const seconds = Math.floor(totalSec % 60);\r\n  const minute = Math.floor(totalSec / 60);\r\n  const result = `${minute < 10 ? '0' + minute : minute}:${seconds < 10 ? '0' + seconds : seconds}`;\r\n  return result;\r\n}","/** currentTime Context */\r\nimport React from 'react';\r\n\r\nexport let currentTime = {\r\n  value: 0,\r\n  update: (time: any) => {}\r\n}; \r\n\r\nexport const currentTimeContext = React.createContext(currentTime)","import React, {useState, useEffect, useContext} from 'react';\r\nimport './style.pcss';\r\nimport SvgIcon from '../../../../component/svg-icon';\r\nimport {curSongInfoType, songTrack} from '../../../../types/index';\r\nimport { Slider } from 'antd';\r\nimport {audioPlayer, parseTime} from '../../../../plugin/index';\r\nimport {currentTimeContext} from '../../../../plugin/currentTimeContext';\r\n\r\ninterface Props {\r\n  status: boolean,\r\n  curSongInfo: curSongInfoType,\r\n  playTracks: Array<songTrack>,\r\n  stopMusic: Function,\r\n  playMusic: Function,\r\n  setSource: Function,\r\n  setStatus: Function,\r\n  fetchSongUrl: Function,\r\n  fetchLyric: Function,\r\n  customStyle: object\r\n}\r\n\r\nfunction AppHeader ({customStyle, setStatus, status, stopMusic, playMusic, curSongInfo, playTracks, fetchSongUrl, setSource, fetchLyric}: Props) {\r\n  const audio = audioPlayer.getInstance();\r\n  let statusClass = ['play-icon'];\r\n  if (status) {\r\n    statusClass.push('active');\r\n  }\r\n  let [volume, setVolume] = useState(audio.volume * 100);\r\n  let [curPlayTime, setPlayTime] = useState(audio.currentTime);\r\n  let [isMove, setMoveStatus] = useState(false);\r\n  let timeContext = useContext(currentTimeContext);\r\n  const nextSongIcon: object = {\r\n    width: 32,\r\n    height: 32,\r\n  }\r\n  const volumeIconStyle = {\r\n    width: 20,\r\n    height: 20\r\n  }\r\n  // listen audio time\r\n  audio.ontimeupdate = function (timeupdate: any) {\r\n    if (!isMove) {\r\n      const currentTime = timeupdate.path[0].currentTime;\r\n      setPlayTime(currentTime);\r\n      timeContext.update(currentTime);\r\n    }\r\n  }\r\n  // initial effect\r\n  /* eslint-disable */\r\n  useEffect(() => {\r\n    // initial volume\r\n    audio.volume = 0.25;\r\n    setVolume(audio.volume * 100);\r\n  }, [])\r\n  /* eslint-disable */\r\n  useEffect(() => {\r\n    fetchLyric(curSongInfo.id);\r\n  }, [curSongInfo.id]);\r\n  /**\r\n   * control player\r\n   */\r\n  async function switchPlayer () {\r\n    if (status) {\r\n      stopMusic();\r\n    } else {\r\n      const songUrlData = await fetchSongUrl(curSongInfo.id);\r\n      curSongInfo.source = songUrlData.data[0].url;\r\n      setSource(curSongInfo);\r\n      slideTimeEnd(curPlayTime);\r\n      playMusic();\r\n    }\r\n  }\r\n  /**\r\n   * get index of current song from song tracks\r\n   */\r\n  function getCurrentSongIndex () {\r\n    return playTracks.findIndex(el => el.id === curSongInfo.id);\r\n  }\r\n  /**\r\n   * play pre song\r\n   * @param curSongIdx current index of song\r\n   */\r\n  function playPreSong (curSongIdx: number) {\r\n    if (curSongIdx > 0) {\r\n      setSource(playTracks[curSongIdx - 1]);\r\n    }\r\n  }\r\n  /**\r\n   * play next song\r\n   * @param curSongIdx current index of song\r\n   */\r\n  function playNextSong (curSongIdx: number) {\r\n    if (curSongIdx < playTracks.length - 1) {\r\n      setSource(playTracks[curSongIdx + 1]);\r\n    }\r\n  }\r\n  // control previous or next\r\n  function controlPreOrNext (type: number) {\r\n    let curSongIdx = getCurrentSongIndex();\r\n    if (type === -1) {\r\n      playPreSong(curSongIdx)\r\n    } else if (type === 1) {\r\n      playNextSong(curSongIdx);\r\n    }\r\n    playMusic();\r\n    setStatus(true);\r\n  }\r\n  /**\r\n   * set value that is slide bar of time\r\n   * @param time select time\r\n   */\r\n  function slideTime (time: any) {\r\n    setMoveStatus(true);\r\n    setPlayTime(time);\r\n  }\r\n  /**\r\n   * slide end event\r\n   * @param time time that is slide end\r\n   */\r\n  function slideTimeEnd (time: any) {\r\n    setMoveStatus(false);\r\n    setPlayTime(time);\r\n    audio.currentTime = time;\r\n  }\r\n  // set volume\r\n  function changeVolumn (volume: any) {\r\n    setVolume(volume);\r\n    audio.volume = volume / 100;\r\n  }\r\n\r\n  return (\r\n    <footer className=\"app-footer\" style={customStyle}>\r\n      <div className=\"footer-bg\"></div>\r\n      <div className=\"footer-container\">\r\n        <div className=\"player-control\">\r\n          <SvgIcon href=\"iconshangyige\" customStyle={nextSongIcon} event={() => controlPreOrNext(-1)}/>\r\n          <div className=\"play-btn\" onClick={switchPlayer}>\r\n            <div className={statusClass.join(' ')}></div>\r\n          </div>\r\n          <SvgIcon href=\"iconxiayige\" customStyle={nextSongIcon} event={() => controlPreOrNext(1)}/>\r\n        </div>\r\n        <div className=\"time-bar\">\r\n          <span className=\"slide-time\">{parseTime(curPlayTime * 1000)}</span>\r\n          <Slider onChange={slideTime} onAfterChange={slideTimeEnd} value={curPlayTime} min={0} max={Math.round(curSongInfo.dt / 1e3)} tipFormatter={null}/>\r\n          <span className=\"slide-time\">{parseTime(curSongInfo.dt)}</span>\r\n        </div>\r\n        <div className=\"volume-bar\">\r\n          <SvgIcon href=\"iconyinliang\" customStyle={volumeIconStyle} event={() => {}}></SvgIcon>\r\n          <Slider onChange={changeVolumn} min={0} max={100} onAfterChange={() => playMusic()} value={volume} tipFormatter={null}/>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default AppHeader;","import React, {useState} from 'react';\r\nimport './style.pcss';\r\nimport {songTrack, curSongInfoType} from '../../../../types/index';\r\nimport parseTime from '../../../../plugin/parseTime';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport SvgIcon from '../../../../component/svg-icon';\r\nimport {message} from 'antd';\r\nimport {useHistory} from 'react-router-dom';\r\ninterface Props {\r\n  curSongInfo: curSongInfoType,\r\n  playMusic: Function,\r\n  loadSource: Function,\r\n  setSource: Function,\r\n  setStatus: Function,\r\n  fetchSongUrl: Function,\r\n  customStyle: object,\r\n  playTracks: Array<songTrack>,\r\n  deleteTrack: Function\r\n}\r\n\r\nfunction LeftSide ({deleteTrack, curSongInfo, fetchSongUrl, loadSource, setSource, setStatus, playMusic, customStyle, playTracks}: Props) {\r\n  const historyList = localStorage.getItem('songTracks');\r\n  let trackListDom;\r\n  const history = useHistory();\r\n  /**\r\n   * play current song\r\n   * @param track the song information that will play\r\n   */\r\n  async function playCurSong (track: any) {\r\n    const songUrlData = await fetchSongUrl(track.id);\r\n    if (!!songUrlData.data[0].url) {\r\n      const songInfo = {\r\n        id: track.id,\r\n        name: track.name,\r\n        picUrl: track.picUrl,\r\n        source: songUrlData.data[0].url,\r\n        player: track.player,\r\n        dt: track.dt\r\n      };\r\n      setSource(songInfo);\r\n      loadSource();\r\n      playMusic();\r\n      setStatus(true);\r\n    } else {\r\n      message.warn('歌曲不存在');\r\n    }\r\n  }\r\n  // get tracks node when historyList is valid\r\n  if (historyList) {\r\n    trackListDom = playTracks.map((track: songTrack, index: number) => {\r\n      return (\r\n        <li className=\"list-item\" key={track.id} onClick={() => {playCurSong(track)}}>\r\n          <span className=\"song-name text-overflow\">{track.name}</span>\r\n          <span className=\"song-time\">{parseTime(track.dt)}</span>\r\n          <SvgIcon href=\"iconlajitong\" event={() => {deleteTrack(index)}}/>\r\n        </li>\r\n      )\r\n    })\r\n  }\r\n  let curSongBoxClass = ['cur-music-box'];\r\n  let playListStyle;\r\n  if (!!curSongInfo.id) {\r\n    curSongBoxClass.push('active');\r\n  } else {\r\n    playListStyle = {\r\n      height: 'calc(100% - 40px)'\r\n    }\r\n  }\r\n  function jumpSongPage () {\r\n    history.push({\r\n      pathname: '/song',\r\n      state: {\r\n        id: curSongInfo.id\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <aside className=\"left-side\" style={customStyle}>\r\n      <h2 className=\"title\" style={customStyle}>播放列表</h2>\r\n      <div className=\"track-container\" style={playListStyle}>\r\n        <Scrollbars style={{ width: '100%', height: '100%' }} autoHide>\r\n          <ul className=\"track-list\">\r\n            {trackListDom}\r\n          </ul>\r\n        </Scrollbars>\r\n      </div>\r\n      <div className={curSongBoxClass.join(' ')} style={customStyle}>\r\n        <SvgIcon href=\"iconfangda\" event={jumpSongPage}/>\r\n        <img className=\"music-img\" src={`${curSongInfo.picUrl}?param=60y60`} alt=\"song-cover\"></img>\r\n        <div className=\"music-info\">\r\n          <h3 className=\"music-title text-overflow\">{curSongInfo.name}</h3>\r\n          <span className=\"music-time\" style={customStyle}>{curSongInfo.player}&nbsp;&nbsp;&nbsp;{parseTime(curSongInfo.dt)}</span>\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default LeftSide;","import React from 'react';\r\nimport {detailType, rankItemType} from '../../types';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport './style.pcss';\r\n\r\ninterface Props {\r\n  recommendList?: Array<detailType>,\r\n  rankList?: Array<rankItemType>,\r\n  type: string\r\n}\r\n\r\nexport default function BoxList({recommendList, rankList, type}: Props) {\r\n  let history = useHistory();\r\n  // set router according to type\r\n  function jumpDetail (id: number) {\r\n    let jumpObj;\r\n    jumpObj = {\r\n      pathname: `${type}/detail`,\r\n      state: {\r\n        id\r\n      }\r\n    }\r\n    history.push(jumpObj)\r\n  }\r\n  // set render data according to type\r\n  let boxListArr: Array<any> = [];\r\n  if (recommendList && type === 'recommend') {\r\n    boxListArr = recommendList;\r\n  } else if (rankList && type === 'rank') {\r\n    boxListArr = rankList;\r\n  }\r\n\r\n  let boxList = boxListArr.map((item) => {\r\n    return (\r\n      <li className=\"box-item\" key={item.id} onClick={() => jumpDetail(item.id)}>\r\n        <div className=\"img-box\">\r\n          <img className=\"img\" src={`${item.coverImgUrl}?param=200y200`} alt=\"box-cover\"/>\r\n        </div>\r\n        <div className=\"box-title\">{item.name}</div>\r\n      </li>\r\n    )\r\n  })\r\n  return (\r\n    <Scrollbars style={{width: '100%', height: '100%'}} autoHide>\r\n      <ul className=\"box-list\">\r\n        {boxList}\r\n      </ul>\r\n    </Scrollbars>\r\n  )\r\n}","// REQUEST RECOMMEND TAGS\r\nexport const FETCH_RECOMMEND_TAGS = {\r\n  SUCCESS: 'FETCH_RECOMMEND_TAGS_SUCCESS',\r\n  ERROR: 'FETCH_RECOMMEND_TAGS_ERROR'\r\n};\r\nexport type FETCH_RECOMMEND_TAGS_SUCCESS = typeof FETCH_RECOMMEND_TAGS.SUCCESS;\r\nexport type FETCH_RECOMMEND_TAGS_ERROR = typeof FETCH_RECOMMEND_TAGS.ERROR;\r\n\r\n// REQUEST RECOMMEND DETAIL ACCORDING TO TAG\r\nexport const FETCH_RECOMMEND_TAG__DETAIL = {\r\n  SUCCESS: 'FETCH_RECOMMEND_DETAIL_TAGS_SUCCESS',\r\n  ERROR: 'FETCH_RECOMMEND_DETAIL_TAGS_ERROR'\r\n};\r\nexport type FETCH_RECOMMEND_DETAIL_SUCCESS = typeof FETCH_RECOMMEND_TAG__DETAIL.SUCCESS;\r\nexport type FETCH_RECOMMEND_DETAIL_ERROR = typeof FETCH_RECOMMEND_TAG__DETAIL.ERROR;\r\n\r\nexport const FETCH_PLAYLIST_DETAIL = {\r\n  SUCCESS: 'FETCH_PLAYLIST_DETAIL_SUCCESS',\r\n  ERROR: 'FETCH_PLAYLIST_DETAIL_ERROR'\r\n};\r\nexport type FETCH_PLAYLIST_DETAIL_SUCCESS = typeof FETCH_PLAYLIST_DETAIL.SUCCESS;\r\nexport type FETCH_PLAYLIST_DETAIL_ERROR = typeof FETCH_PLAYLIST_DETAIL.ERROR;\r\n\r\nexport const FETCH_SONG_URL = {\r\n  SUCCESS: 'FETCH_SONG_URL_SUCCESS',\r\n  ERROR: 'FETCH_SONG_URL_ERROR'\r\n};\r\nexport type FETCH_SONG_URL_SUCCESS = typeof FETCH_SONG_URL.SUCCESS;\r\nexport type FETCH_SONG_URL_ERROR = typeof FETCH_SONG_URL.ERROR;\r\n\r\n// FETCH RANK LIST\r\nexport const FETCH_RANK_LIST = {\r\n  SUCCESS: 'FFETCH_RANK_LIST_SUCCESS',\r\n  ERROR: 'FETCH_RANK_LIST_ERROR'\r\n};\r\nexport type FETCH_RANK_LIST_SUCCESS = typeof FETCH_RANK_LIST.SUCCESS;\r\nexport type FETCH_RANK_LIST_ERROR = typeof FETCH_RANK_LIST.ERROR;\r\n\r\n// FETCH LYRIC\r\nexport const FETCH_LYRIC = {\r\n  SUCCESS: 'FETCH_LYRIC_SUCCESS',\r\n  ERROR: 'FETCH_LYRIC_ERROR'\r\n};\r\nexport type FETCH_LYRIC_SUCCESS = typeof FETCH_LYRIC.SUCCESS;\r\nexport type FETCH_LYRIC_ERROR = typeof FETCH_LYRIC.ERROR;\r\n\r\n// PLAY CONTROL STATE\r\nexport const MUSIC_PLAYER = {\r\n  PLAY_MUSIC: 'PLAY_MUSIC',\r\n  STOP_MUSIC: 'STOP_MUSIC',\r\n  SET_SOURCE: 'SET_SOURCE',\r\n  LOAD_SOURCE: 'LOAD_SOURCE',\r\n  SET_LOOP: 'SET_LOOP',\r\n  SET_PLAY_INDEX: 'SET_PLAY_INDEX',\r\n  SET_STATUS: 'SET_STATUS',\r\n  CURRENT_TIME: 'CURRENT_TIME'\r\n}\r\n\r\nexport type PLAY_MUSIC = typeof MUSIC_PLAYER.PLAY_MUSIC;\r\nexport type STOP_MUSIC = typeof MUSIC_PLAYER.STOP_MUSIC;\r\nexport type SET_SOURCE = typeof MUSIC_PLAYER.SET_SOURCE;\r\nexport type LOAD_SOURCE = typeof MUSIC_PLAYER.LOAD_SOURCE;\r\nexport type SET_LOOP = typeof MUSIC_PLAYER.SET_LOOP;\r\nexport type SET_PLAY_INDEX = typeof MUSIC_PLAYER.SET_PLAY_INDEX;\r\nexport type SET_STATUS = typeof MUSIC_PLAYER.SET_STATUS;\r\n// PUSH SONG INTO TRACKS\r\nexport const PUSH_TRACKS = 'PUSH_TRACKS'\r\nexport type PUSH_TRACKS = typeof PUSH_TRACKS;\r\n\r\n// DELETE SONG IN TRACKS\r\nexport const DELETE_TRACKS = 'DELETE_TRACKS'\r\nexport type DELETE_TRACKS = typeof DELETE_TRACKS;\r\n","/**\r\n * @param {String} url 请求的URL\r\n * @param {String} method 请求方法: POST, DELETE, PUT, GET\r\n * @param {Object} data 请求JSON数据\r\n */\r\nfunction fetchUtil (url: string, method: string, data?: object): Promise<object> {\r\n  return fetch(url, {\r\n    method: method,\r\n    body: JSON.stringify(data)\r\n  }).then(res => {\r\n    return res.json();\r\n  })\r\n}\r\n\r\nexport default fetchUtil;","import req from './request';\r\n\r\nconst server_url: string = `http://129.226.190.242:3000`;\r\n\r\nconst Api = {\r\n  fetch_recommend_tags: () => req(`${server_url}/playlist/hot`, 'GET'),\r\n  fetch_recommend_tags_detail: (cat: string) => req(`${server_url}/top/playlist?limit=30&cat=${cat}`, 'GET'),\r\n  fetch_playlist_detail: (playlistId: number) => req(`${server_url}/playlist/detail?id=${playlistId}`, 'GET'),\r\n  fetch_song_url: (songId: number) => req(`${server_url}/song/url?id=${songId}`, 'GET'),\r\n  fetch_rank_list: () => req(`${server_url}/toplist`, 'GET'),\r\n  fetch_lyric: (songId: number) => req(`${server_url}/lyric?id=${songId}`, 'GET')\r\n}\r\n\r\nexport default Api;","import { ThunkAction } from 'redux-thunk';\r\nimport { Action } from 'redux';\r\nimport * as actions from '../../const';\r\nimport server from '../../server/api';\r\nimport {requestActionType} from '../../types/index';\r\nimport {recommendTagDetailType, detailType} from '../../types/index';\r\n// fetch recommend tags\r\nconst fetchTagsSuccess= (payload: object): requestActionType => {\r\n  return {\r\n    type: actions.FETCH_RECOMMEND_TAGS.SUCCESS,\r\n    payload\r\n  }\r\n};\r\n\r\nconst fetchTagsError= (payload: object): requestActionType => {\r\n  return {\r\n    type: actions.FETCH_RECOMMEND_TAGS.ERROR,\r\n    payload\r\n  }\r\n};\r\n\r\nconst fetchRemmendTags = (): ThunkAction<void, null, null, Action<string>> => {\r\n  return dispatch => {\r\n    server.fetch_recommend_tags().then(res => {\r\n      dispatch(fetchTagsSuccess(res));\r\n    }).catch(err => {\r\n      dispatch(fetchTagsError(err));\r\n    });\r\n  }\r\n}\r\n// fetch recommend details according to tag selected\r\nconst fetchDetailSuccess= (payload: recommendTagDetailType): requestActionType => {\r\n  let filteredStack: Array<detailType> = [];\r\n  if (payload.code === 200) {\r\n    payload.playlists.forEach((item) => {\r\n      if (!filteredStack.find((el: detailType) => el.id === item.id)) {\r\n        filteredStack.push(item)\r\n      }\r\n    });\r\n }\r\n  return {\r\n    type: actions.FETCH_RECOMMEND_TAG__DETAIL.SUCCESS,\r\n    payload: {\r\n      playlists: filteredStack\r\n    }\r\n  }\r\n};\r\n\r\nconst fetchDetailError= (payload: object): requestActionType => ({\r\n  type: actions.FETCH_RECOMMEND_TAG__DETAIL.ERROR,\r\n  payload\r\n});\r\n\r\nconst fetchRecommendDetail = (cat: string): ThunkAction<void, null, null, Action<string>> => {\r\n  return dispatch => {\r\n    server.fetch_recommend_tags_detail(cat).then((res: object) => {\r\n      dispatch(fetchDetailSuccess(res as recommendTagDetailType));\r\n    }).catch(err => {\r\n      dispatch(fetchDetailError(err));\r\n    })\r\n  }\r\n}\r\n\r\nexport {\r\n  fetchRemmendTags,\r\n  fetchRecommendDetail\r\n}","import { ThunkAction } from 'redux-thunk';\r\nimport { Action } from 'redux';\r\nimport * as actions from '../../const';\r\nimport server from '../../server/api';\r\nimport {requestActionType, playlistDetailType} from '../../types/index';\r\n\r\nconst fetchPlaylistDetailSuccess = (payload: playlistDetailType): requestActionType => {\r\n  return {\r\n    type: actions.FETCH_PLAYLIST_DETAIL.SUCCESS,\r\n    payload\r\n  }\r\n};\r\n\r\nconst fetchPlaylistDetailError = (payload: object): requestActionType => ({\r\n  type: actions.FETCH_PLAYLIST_DETAIL.ERROR,\r\n  payload\r\n});\r\n\r\nconst fetchPlaylistDetail = (playlistId: number): ThunkAction<void, null, null, Action<string>> => {\r\n  return dispatch => {\r\n    server.fetch_playlist_detail(playlistId).then((res: object) => {\r\n      dispatch(fetchPlaylistDetailSuccess(res as playlistDetailType));\r\n    }).catch(err => {\r\n      dispatch(fetchPlaylistDetailError(err));\r\n    })\r\n  }\r\n}\r\n\r\nconst fetchSongUrl = async (songId: number) => {\r\n    return await server.fetch_song_url(songId);\r\n}\r\n\r\nexport {\r\n  fetchPlaylistDetail,\r\n  fetchSongUrl\r\n}","import * as actionTypes from '../../const/index';\r\n\r\nexport function playMusic () {\r\n  return {\r\n    type: actionTypes.MUSIC_PLAYER.PLAY_MUSIC,\r\n    payload: true\r\n  }\r\n}\r\n\r\nexport function stopMusic () {\r\n  return {\r\n    type: actionTypes.MUSIC_PLAYER.STOP_MUSIC,\r\n    payload: false\r\n  }\r\n}\r\n\r\nexport function loadSource () {\r\n  return {\r\n    type: actionTypes.MUSIC_PLAYER.LOAD_SOURCE,\r\n    payload: null\r\n  }\r\n}\r\n\r\n\r\nexport function setSource (source: object) {\r\n  return {\r\n    type: actionTypes.MUSIC_PLAYER.SET_SOURCE,\r\n    payload: source\r\n  }\r\n}\r\n\r\nexport function setPlayIndex (index: number) {\r\n  return {\r\n    type: actionTypes.MUSIC_PLAYER.SET_PLAY_INDEX,\r\n    payload: index\r\n  }\r\n}\r\n\r\nexport function setLoop () {\r\n  return {\r\n    type: actionTypes.MUSIC_PLAYER.SET_LOOP\r\n  }\r\n}\r\n\r\nexport function setStatus (status: boolean) {\r\n  return {\r\n    type: actionTypes.MUSIC_PLAYER.SET_STATUS,\r\n    payload: status\r\n  }\r\n}","import { ThunkAction } from 'redux-thunk';\r\nimport { Action } from 'redux';\r\nimport * as actions from '../../const';\r\nimport server from '../../server/api';\r\nimport {requestActionType} from '../../types/index';\r\n\r\nconst fetchRankListError= (payload: object): requestActionType => {\r\n  return {\r\n    type: actions.FETCH_RANK_LIST.ERROR,\r\n    payload\r\n  }\r\n};\r\n\r\nconst fetchRankListSuccess= (payload: object): requestActionType => {\r\n  return {\r\n    type: actions.FETCH_RANK_LIST.SUCCESS,\r\n    payload\r\n  }\r\n};\r\n\r\nconst fetchRankList = (): ThunkAction<void, null, null, Action<string>> => {\r\n  return dispatch => {\r\n    server.fetch_rank_list().then(res => {\r\n      dispatch(fetchRankListSuccess(res));\r\n    }).catch(err => {\r\n      dispatch(fetchRankListError(err));\r\n    });\r\n  }\r\n}\r\n\r\nexport {\r\n  fetchRankList\r\n}","import { ThunkAction } from 'redux-thunk';\r\nimport { Action } from 'redux';\r\nimport * as actions from '../../const';\r\nimport server from '../../server/api';\r\nimport {requestActionType} from '../../types/index';\r\nimport {} from '../../types/index';\r\n// fetch recommend tags\r\nconst fetchLyricSuccess= (payload: object): requestActionType => {\r\n  return {\r\n    type: actions.FETCH_LYRIC.SUCCESS,\r\n    payload\r\n  }\r\n};\r\n\r\nconst fetchLyricError= (payload: object): requestActionType => {\r\n  return {\r\n    type: actions.FETCH_LYRIC.ERROR,\r\n    payload\r\n  }\r\n};\r\n\r\nconst fetchLyric = (songId: number): ThunkAction<void, null, null, Action<string>> => {\r\n  return dispatch => {\r\n    server.fetch_lyric(songId).then(res => {\r\n      dispatch(fetchLyricSuccess(res));\r\n    }).catch(err => {\r\n      dispatch(fetchLyricError(err));\r\n    });\r\n  }\r\n}\r\n\r\nexport {\r\n  fetchLyric\r\n}","import {connect} from 'react-redux';\r\nimport Rank from '../../page/rank/index';\r\nimport * as actions from '../../store/actions';\r\nfunction mapStateToProps(state: object) {\r\n  return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    fetchRankList: () => dispatch(actions.fetchRankList()),\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Rank);","import React, {useEffect} from 'react';\r\nimport {rankListType} from '../../types/index';\r\nimport BoxList from '../../component/box-list'\r\nimport './style.pcss';\r\n\r\ninterface Props {\r\n  fetchRankList: Function,\r\n  rankList: rankListType\r\n}\r\n\r\nexport default function Recommend({fetchRankList, rankList}: Props) {\r\n  // fetch rank list\r\n  /* eslint-disable */\r\n  useEffect(() => {\r\n    fetchRankList();\r\n  }, []);\r\n  // set node of rank list\r\n  let rankDom;\r\n  if (rankList && rankList.list) {\r\n    rankDom = (\r\n      <BoxList rankList={rankList.list} type=\"rank\"/>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"rank\">\r\n      {rankDom}\r\n    </div>\r\n  )\r\n};\r\n","import React, {useState, useEffect, useContext} from 'react';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {lyricType, curSongInfoType} from '../../types/index';\r\nimport parseTime from '../../plugin/parseTime';\r\nimport {currentTimeContext} from '../../plugin/currentTimeContext';\r\nimport './style.pcss';\r\n\r\ninterface locationType {\r\n  state: any\r\n}\r\n\r\ninterface Props {\r\n  curSongInfo: curSongInfoType,\r\n  currentTime: number,\r\n  fetchLyric: Function,\r\n  lyricData: any\r\n}\r\n\r\nlet parsedResult: any = [];\r\n// get current line that is active of lyric\r\nconst getActiveIndex = (function () {\r\n  let preIndex = -1;\r\n  return function getActiveIndex (searchTime: string) {\r\n    let index = 0;\r\n    let resultIndex: number | undefined = void 0;\r\n    for (let currentLine of parsedResult) {\r\n      if (currentLine.time.includes(searchTime)) {\r\n        resultIndex = index;\r\n        break;\r\n      }\r\n      index++;\r\n    }\r\n    if (resultIndex === void 0) {\r\n      resultIndex = preIndex;\r\n    } else {\r\n      preIndex = resultIndex;\r\n    }\r\n    return resultIndex;\r\n  }\r\n})();\r\n\r\nexport default function Song ({fetchLyric, lyricData, curSongInfo}: Props) {\r\n  let location: locationType = useLocation();\r\n  let timeContext = useContext(currentTimeContext);\r\n  const [currentLine, setCurrentLine] = useState(0);\r\n  const songId = location.state.id;\r\n  // set lyrics animation that move upward\r\n  useEffect(() => {\r\n    let lyricListDom: any = document.querySelector('.lyric-list');\r\n    if (lyricListDom && currentLine > 7) {\r\n      lyricListDom.style.top = `-${(currentLine - 7) * 30}px`;\r\n    }\r\n  }, [currentLine])\r\n  // fetch lyric\r\n  /* eslint-disable */\r\n  useEffect(() => {\r\n    fetchLyric(songId);\r\n  }, []);\r\n  // init currentLine when song change\r\n  useEffect(() => {\r\n    let lyricListDom: any = document.querySelector('.lyric-list');\r\n    setCurrentLine(0);\r\n    lyricListDom.removeAttribute('style');\r\n  }, [curSongInfo.id])\r\n  // initial parsedResult\r\n  useEffect(() => {\r\n    parsedResult = [];\r\n    let lyricStr: string = '';\r\n    if (lyricData && lyricData.lrc) {\r\n      lyricStr = lyricData.lrc.lyric;\r\n    }\r\n    /** parse lyric **/\r\n    parsedResult = (function parseLyric() {\r\n      // split string for get lyric array\r\n      const lyricArr = lyricStr.split('\\n');\r\n      let matchInfo: any = [];\r\n      // listen audio time\r\n      lyricArr.map(line => {\r\n        matchInfo = line.match(/\\[\\d{2}:\\d{2}.(\\d{2}|\\d{3})\\]/);\r\n        if (matchInfo) {\r\n          // push into result stack\r\n          parsedResult.push({\r\n            time: matchInfo[0].slice(1, -1),\r\n            value: line.slice(matchInfo[0].length).trim()\r\n          })\r\n        }\r\n      });\r\n      return parsedResult;\r\n    })();\r\n  });\r\n  let computedCurLine;\r\n  // get node of lyric\r\n  let lyricDom = parsedResult.map((line: lyricType, index: number) => {\r\n    const lyricStyle = ['lyric-line'];\r\n    computedCurLine = getActiveIndex(parseTime(timeContext.value * 1e3));\r\n    // set new current line if not find current line\r\n    if (computedCurLine !== currentLine) {\r\n      setCurrentLine(computedCurLine);\r\n    }\r\n    if (currentLine === index) {\r\n      lyricStyle.push('active');\r\n    }\r\n    return (\r\n      <li className={lyricStyle.join(' ')} key={index}>{line.value}</li>\r\n    )\r\n  })\r\n  return (\r\n    <div className=\"song\">\r\n      <ul className=\"lyric-list\">{lyricDom}</ul>\r\n    </div>\r\n  )\r\n}","import {connect} from 'react-redux';\r\nimport Song from '../../page/song/index';\r\nimport * as actions from '../../store/actions';\r\nfunction mapStateToProps(state: object) {\r\n  return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    fetchLyric: (songId: number) => dispatch(actions.fetchLyric(songId))\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Song);","import {connect} from 'react-redux';\r\nimport Detail from '../../page/detail/index';\r\nimport * as actions from '../../store/actions';\r\nimport {songTrack} from '../../types/index';\r\n\r\nfunction mapStateToProps (state: object) {\r\n  return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    fetchPlaylistDetail: (playlistId: number) => dispatch(actions.fetchPlaylistDetail(playlistId)),\r\n    fetchSongUrl: async (songId: number) => await actions.fetchSongUrl(songId),\r\n    playMusic: () => dispatch(actions.playMusic()),\r\n    loadSource: () => dispatch(actions.loadSource()),\r\n    setSource: (source: object) => dispatch(actions.setSource(source)),\r\n    setLoop: () => dispatch(actions.setLoop()),\r\n    pushPlayTracks: (track: songTrack) => dispatch(actions.pushPlayTracks(track)),\r\n    setStatus: (status: boolean) => dispatch(actions.setStatus(status))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Detail);","import * as actionTypes from '../../const/index';\r\nimport {songTrack} from '../../types/index';\r\n\r\nconst pushPlayTracks = function (track: songTrack) {\r\n  return {\r\n    type: actionTypes.PUSH_TRACKS,\r\n    payload: track\r\n  }\r\n}\r\n\r\nconst deleteInTracks = function (index: number) {\r\n  return {\r\n    type: actionTypes.DELETE_TRACKS,\r\n    payload: index\r\n  }\r\n}\r\n\r\nexport {\r\n  pushPlayTracks,\r\n  deleteInTracks\r\n}","import React, {useEffect} from 'react';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {playlistDetailType, songUrlType} from '../../types/index';\r\nimport './style.pcss';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport parseTime from '../../plugin/parseTime';\r\nimport { message } from 'antd';\r\n\r\ninterface Props {\r\n  playlistDetail: playlistDetailType,\r\n  songUrl: songUrlType,\r\n  playMusic: Function,\r\n  loadSource: Function,\r\n  setSource: Function,\r\n  setLoop: Function,\r\n  pushPlayTracks: Function,\r\n  fetchPlaylistDetail: Function,\r\n  fetchSongUrl: Function,\r\n  setPlayIndex: Function,\r\n  setStatus: Function\r\n}\r\n\r\ninterface locationType {\r\n  state: any\r\n}\r\n\r\nexport default function Detail ({fetchPlaylistDetail, playlistDetail, fetchSongUrl, playMusic, loadSource, setSource, setLoop, pushPlayTracks, setStatus}: Props) {\r\n  let location: locationType = useLocation();\r\n  let playlistId: number = location.state.id;\r\n  /* eslint-disable */\r\n  useEffect(() => {\r\n    fetchPlaylistDetail(playlistId);\r\n  }, []);\r\n\r\n  let topInfo;\r\n  let songslist;\r\n\r\n  async function playSong (track: any) {\r\n    const songUrlData = await fetchSongUrl(track.id);\r\n    if (!!songUrlData.data[0].url) {\r\n      const songInfo = {\r\n        id: track.id,\r\n        name: track.name,\r\n        picUrl: track.al.picUrl,\r\n        source: songUrlData.data[0].url,\r\n        player: track.ar[0].name,\r\n        dt: track.dt\r\n      };\r\n      setSource(songInfo);\r\n      loadSource();\r\n      playMusic();\r\n      pushPlayTracks(songInfo);\r\n      setStatus(true);\r\n    } else {\r\n      message.warn('歌曲不存在');\r\n    }\r\n  }\r\n\r\n  if (playlistDetail.playlist) {\r\n    let playList = playlistDetail.playlist;\r\n    songslist = playList.tracks.map((track, idx) => {\r\n      return (\r\n        <div className=\"table-row\" key={track.id} onClick={() => playSong(track)}>\r\n          <span className=\"table-cell track-index\">{idx + 1}</span>\r\n          <span className=\"table-cell song-name\">{track.name}</span>\r\n          <span className=\"table-cell song-player\">{track.ar[0].name}</span>\r\n          <span className=\"table-cell song-time\">{parseTime(track.dt)}</span>\r\n        </div>\r\n      )\r\n    })\r\n    topInfo = (\r\n      <div className=\"playlist-top\">\r\n        <img className=\"playlist-cover\" src={`${playList.coverImgUrl}?param=200y200`} alt=\"playlist cover\"></img>\r\n        <div className=\"playlist-info\">\r\n          <h2 className=\"playlist-title\">{playList.name}</h2>\r\n          <p className=\"playlist-desc\">{playList.description}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"playlist-detail\">\r\n      <Scrollbars style={{ width: '100%', height: '100%' }} autoHide>\r\n        {topInfo}\r\n        <div className=\"table-wrapper\">\r\n          <div className=\"table-title\">\r\n            <div className=\"title-item\"></div>\r\n            <div className=\"title-item\">歌曲</div>\r\n            <div className=\"title-item\">歌手</div>\r\n            <div className=\"title-item\">时长</div>\r\n          </div>\r\n          <div className=\"table-content\">\r\n            {songslist}\r\n          </div>\r\n        </div>\r\n      </Scrollbars>\r\n    </div>\r\n  )\r\n}\r\n","import {connect} from 'react-redux';\r\nimport RecommendList from '../../page/recommend/index';\r\nimport * as actions from '../../store/actions';\r\nfunction mapStateToProps(state: object) {\r\n  return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    fetchRemmendTags: () => dispatch(actions.fetchRemmendTags()),\r\n    fetchRecommendDetail: (cat: string) => dispatch(actions.fetchRecommendDetail(cat))\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecommendList);","import React, { useEffect, useState} from 'react';\r\nimport {recommendTagsType, recommendTagDetailType, TagsType} from '../../types';\r\nimport BoxList from '../../component/box-list';\r\nimport './style.pcss';\r\n\r\ninterface Props {\r\n  recommendTags: recommendTagsType,\r\n  recommendTagDetail: recommendTagDetailType,\r\n  fetchRemmendTags: () => recommendTagsType,\r\n  fetchRecommendDetail: (tag: string) => recommendTagsType\r\n}\r\n\r\nexport default function Recommend({recommendTags, recommendTagDetail, fetchRemmendTags, fetchRecommendDetail}: Props) {\r\n  let [activeTag, setActiveTag] = useState('华语');\r\n  let recommendBox;\r\n\r\n  /* eslint-disable */\r\n  useEffect(() => {\r\n    if (recommendTags.code === void 0) {\r\n      fetchRemmendTags()\r\n    }\r\n    if (Object.keys(recommendTags).length > 0) {\r\n      fetchRecommendDetail(recommendTags.tags[0].name)\r\n    }\r\n  }, [recommendTags.code]);\r\n\r\n  /**\r\n   * select tag\r\n   * @param selectedTag select information of tag\r\n   */\r\n  function selectTag (selectedTag: TagsType) {\r\n    setActiveTag(selectedTag.name);\r\n    fetchRecommendDetail(selectedTag.name);\r\n  }\r\n  // set tag DOM\r\n  if (recommendTags && recommendTags.tags) {\r\n    recommendBox = recommendTags.tags.map((item) =>{\r\n      let tabClass = ['tag'];\r\n      if (activeTag === item.name) {\r\n        tabClass.push('active');\r\n      }\r\n      return (\r\n        <li className={tabClass.join(' ')} key={item.id} onClick={() => selectTag(item)}>{item.name}</li>\r\n      )\r\n    })\r\n  }\r\n  // set node of recommend list\r\n  let BoxListDom;\r\n  if (Object.keys(recommendTagDetail).length > 0) {\r\n    BoxListDom = (\r\n      <BoxList recommendList={recommendTagDetail.playlists} type=\"recommend\"/>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"recommend\">\r\n        <ul className=\"tags-list\">\r\n          {recommendBox}\r\n        </ul>\r\n      {BoxListDom}\r\n    </div>\r\n  )\r\n}\r\n","import {connect} from 'react-redux';\r\nimport Home from '../../page/home/index';\r\nimport * as actions from '../../store/actions';\r\n\r\nexport function mapStateToProps(state: object) {\r\n  return state;\r\n}\r\n\r\nexport function mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    loadSource: () => dispatch(actions.loadSource()),\r\n    setSource: (source: object) => dispatch(actions.setSource(source)),\r\n    stopMusic: () => dispatch(actions.stopMusic()),\r\n    playMusic: () => dispatch(actions.playMusic()),\r\n    setStatus: (status: boolean) => dispatch(actions.setStatus(status)),\r\n    fetchSongUrl: async (songId: number) => await actions.fetchSongUrl(songId),\r\n    fetchLyric: (songId: number) => dispatch(actions.fetchLyric(songId)),\r\n    deleteTrack: (index: number) => dispatch(actions.deleteInTracks(index))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, {useState} from 'react';\r\nimport {Route, Switch, Redirect, useRouteMatch} from 'react-router-dom';\r\nimport AppHeader from './component/header';\r\nimport AppFooter from './component/footer';\r\nimport LeftSide from './component/left-side';\r\nimport Rank from '../../container/rank/index';\r\nimport Song from '../../container/song/index';\r\nimport Detail from '../../container/detail';\r\nimport Recommend from '../../container/recommend/index';\r\nimport {curSongInfoType, songTrack} from '../../types/index';\r\nimport {currentTime, currentTimeContext} from '../../plugin/currentTimeContext';\r\nimport './style.pcss';\r\ninterface Props {\r\n  playTracks: Array<songTrack>,\r\n  curSongInfo: curSongInfoType,\r\n  playMusic: Function,\r\n  stopMusic: Function,\r\n  loadSource: Function,\r\n  setSource: Function,\r\n  setStatus: Function,\r\n  fetchSongUrl: Function,\r\n  fetchLyric: Function,\r\n  deleteTrack: Function\r\n}\r\nexport default function Home({setStatus, curSongInfo, stopMusic, playMusic, playTracks, loadSource, setSource, fetchSongUrl, fetchLyric, deleteTrack}: Props) {\r\n  const [time, setTime] = useState(currentTime);\r\n  function updateCurrentTime (time: any) {\r\n    setTime(time);\r\n  }\r\n  const currentTimeBus: any = {\r\n    value: time,\r\n    update: updateCurrentTime\r\n  }\r\n  // set style on song page\r\n  const isSongRouter = !!useRouteMatch('/song');\r\n  let homeBgStyle = {};\r\n  let invalidStyle = {};\r\n  if (isSongRouter) {\r\n    homeBgStyle = {\r\n      backgroundImage: `url(${curSongInfo.picUrl}?param=${document.body.offsetWidth / 3.9}y${document.body.offsetHeight / 3.9})`\r\n    };\r\n    invalidStyle = {\r\n      background: 'none',\r\n      border: 'none',\r\n      color: 'white'\r\n    };\r\n  }\r\n  return (\r\n    <currentTimeContext.Provider value={currentTimeBus}>\r\n      <div className=\"home-bg\" style={homeBgStyle}></div>\r\n      <div className=\"home\">\r\n        <AppHeader customStyle={invalidStyle}/>\r\n        <main className=\"app-main\" style={invalidStyle}>\r\n          <LeftSide deleteTrack={deleteTrack} playTracks={playTracks} customStyle={invalidStyle} curSongInfo={curSongInfo} playMusic={playMusic} loadSource={loadSource} setSource={setSource} setStatus={setStatus} fetchSongUrl={fetchSongUrl}></LeftSide>\r\n            <article className=\"container\" style={invalidStyle}>\r\n              <Switch>\r\n                <Redirect from=\"/\" exact to=\"/recommend\" />\r\n                <Route path=\"/recommend\" component={Recommend} exact></Route>\r\n                <Route path={`/recommend/detail`} component={Detail}></Route>\r\n                <Route path={`/rank/detail`} component={Detail}></Route>\r\n                <Route path=\"/rank\" component={Rank} exact></Route>\r\n                <Route path=\"/song\" component={Song} exact></Route>\r\n              </Switch>\r\n            </article>\r\n        </main>\r\n        <AppFooter customStyle={invalidStyle} status={curSongInfo.status} stopMusic={stopMusic} playMusic={playMusic} playTracks={playTracks} curSongInfo={curSongInfo} setSource={setSource} setStatus={setStatus} fetchSongUrl={fetchSongUrl} fetchLyric={fetchLyric}></AppFooter>\r\n      </div>\r\n    </currentTimeContext.Provider>\r\n  )\r\n};\r\n","import * as React from 'react';\r\nimport Home from '../container/home/index';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\n\r\nclass Router extends React.Component {\r\n  render () {\r\n    return (\r\n      <BrowserRouter>\r\n        <Route path=\"/\" component={Home}></Route>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Router;","import * as actionTypes  from '../../const/index';\r\nimport {songTrack, requestActionType} from '../../types/index';\r\n\r\nconst playTracks = function (state: Array<object> = [], action: any) {\r\n  const songTracks = localStorage.getItem('songTracks');\r\n  let parsedTracks: any[] = [];\r\n  if (songTracks) {\r\n    parsedTracks = JSON.parse(songTracks);\r\n    state = parsedTracks;\r\n  }\r\n  /**\r\n   * push tracks stack on history list\r\n   * @param songInfo the song will push\r\n   */\r\n  function inputHistoryTracks (songInfo: songTrack) {\r\n    if (!parsedTracks.find((track: songTrack) => track.id === songInfo.id)) {\r\n      parsedTracks.push(songInfo);\r\n    }\r\n    localStorage.setItem('songTracks', JSON.stringify(parsedTracks));\r\n    return parsedTracks\r\n  }\r\n  /**\r\n   * delete song in history list\r\n   * @param delIdx delete index of song\r\n   */\r\n  function deleteItemInTracks (delIdx: number) {\r\n    parsedTracks.splice(delIdx, 1);\r\n    localStorage.setItem('songTracks', JSON.stringify(parsedTracks));\r\n    return parsedTracks;\r\n  }\r\n\r\n  switch(action.type) {\r\n    case actionTypes.PUSH_TRACKS:\r\n      return inputHistoryTracks(action.payload);\r\n    case actionTypes.DELETE_TRACKS:\r\n      return deleteItemInTracks(action.payload);\r\n  }\r\n  return state;\r\n}\r\n\r\nconst songUrl = (state: object = {}, action: requestActionType): object => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_SONG_URL.SUCCESS:\r\n      return Object.assign({}, state, action.payload);\r\n  }\r\n  return state;\r\n};\r\n\r\nexport {\r\n  playTracks,\r\n  songUrl\r\n}","import {combineReducers} from 'redux';\r\nimport {recommendTags, recommendTagDetail} from './recommend';\r\nimport {playlistDetail} from './playlist';\r\nimport {curSongInfo} from './audio';\r\nimport {playTracks, songUrl} from './base';\r\nimport {rankList} from './rank';\r\nimport {lyricData} from './song';\r\n\r\nexport default combineReducers({\r\n  recommendTags,\r\n  recommendTagDetail,\r\n  playlistDetail,\r\n  songUrl,\r\n  curSongInfo,\r\n  playTracks,\r\n  rankList,\r\n  lyricData\r\n});","import * as actionTypes from '../../const';\r\nimport {requestActionType} from '../../types';\r\n\r\n\r\nconst recommendTags = (state: object = {}, action: requestActionType): object => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_RECOMMEND_TAGS.SUCCESS:\r\n      return Object.assign({}, state, action.payload);\r\n  }\r\n  return state;\r\n};\r\n\r\nconst recommendTagDetail = (state: object = {}, action: requestActionType): object => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_RECOMMEND_TAG__DETAIL.SUCCESS:\r\n      return Object.assign({}, state, action.payload);\r\n  }\r\n  return state;\r\n};\r\n\r\nexport {\r\n  recommendTags,\r\n  recommendTagDetail\r\n};","import * as actionTypes from '../../const';\r\nimport {requestActionType} from '../../types';\r\n\r\nconst playlistDetail = (state: object = {}, action: requestActionType): object => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_PLAYLIST_DETAIL.SUCCESS:\r\n      return Object.assign({}, state, action.payload);\r\n  }\r\n  return state;\r\n};\r\n\r\nexport {\r\n  playlistDetail\r\n};","import * as actionTypes  from '../../const/index';\r\nimport audioPlayer from '../../plugin/audioPlayer';\r\n\r\nfunction curSongInfo (state: object = {}, action: any) {\r\n  const audio = audioPlayer.getInstance();\r\n  const localSongInfo = localStorage.getItem('curSongInfo');\r\n  let parsedSongInfo;\r\n  if (localSongInfo) {\r\n    parsedSongInfo = JSON.parse(localSongInfo);\r\n  }\r\n\r\n  switch(action.type) {\r\n    case actionTypes.MUSIC_PLAYER.PLAY_MUSIC:\r\n      // set default song source\r\n      if (!audio.src && localSongInfo) {\r\n        audio.src = parsedSongInfo.source;\r\n      }\r\n      audio.play();\r\n      return Object.assign({}, state, {status: action.payload});\r\n    case actionTypes.MUSIC_PLAYER.STOP_MUSIC:\r\n      audio.pause();\r\n      return Object.assign({}, state, {status: action.payload});\r\n    case actionTypes.MUSIC_PLAYER.SET_SOURCE:\r\n      audio.src = action.payload.source;\r\n      localStorage.setItem('curSongInfo', JSON.stringify(action.payload));\r\n      return Object.assign({}, state, action.payload)\r\n    case actionTypes.MUSIC_PLAYER.LOAD_SOURCE:\r\n      audio.load();\r\n    break;\r\n    case actionTypes.MUSIC_PLAYER.SET_PLAY_INDEX:\r\n      return Object.assign({}, state, {playIndex: action.payload});\r\n    case actionTypes.MUSIC_PLAYER.SET_STATUS:\r\n        return Object.assign({}, state, {status: action.payload});\r\n  }\r\n  return Object.assign({}, state, parsedSongInfo);\r\n}\r\n\r\nexport {\r\n  curSongInfo\r\n}","import * as actionTypes from '../../const';\r\nimport {requestActionType} from '../../types';\r\n\r\nconst rankList = (state: object = {}, action: requestActionType): object => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_RANK_LIST.SUCCESS:\r\n      return Object.assign({}, state, action.payload);\r\n  }\r\n  return state;\r\n};\r\n\r\nexport {\r\n  rankList\r\n};","import * as actionTypes from '../../const';\r\nimport {requestActionType} from '../../types';\r\n\r\n\r\nconst lyricData = (state: object = {}, action: requestActionType): object => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_LYRIC.SUCCESS:\r\n      return Object.assign({}, state, action.payload);\r\n  }\r\n  return state;\r\n};\r\n\r\nexport {\r\n  lyricData\r\n};","import {createStore, applyMiddleware} from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport default createStore (\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)","import * as React from 'react';\r\nimport Router from './router';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\nclass App extends React.Component {\r\n  render () {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router/>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './style.pcss';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}